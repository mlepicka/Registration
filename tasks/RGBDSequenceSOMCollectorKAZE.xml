<?xml version="1.0" encoding="utf-8"?>
<Task>
	<!-- reference task information -->
	<Reference>
		<Author>
			<name>Tomasz Kornuta</name>
			<link></link>
		</Author>
		
		<Description>
			<brief>RGBDSequenceSOMCollector</brief>
			<full>Loads colour and depth images, localizes reference frame of the board, extract mask, transforms them into point clouds from the area represented by the mask, extracts SIFT features and displays resulting point clouds wrt board reference frame.</full>
		</Description>
	</Reference>
	
<!--------------------------------------------------------------------------------------------------------------------->
<!--------------------------------------------------------------------------------------------------------------------->
<!-- task definition -->
<!--------------------------------------------------------------------------------------------------------------------->
<!--------------------------------------------------------------------------------------------------------------------->

	<Subtasks>
		<Subtask name="Processing">
			<Executor name="Processing"  period="0.2">
<!--------------------------------------------------------------------------------------------------------------------->
<!--                                     Sources
<!--------------------------------------------------------------------------------------------------------------------->

				<Component name="Trigger" type="CvBasic:Trigger" priority="1" bump="0">
                    <param name="auto_trigger">1</param>
				</Component>

				<Component name="RGBSequence" type="CvBasic:Sequence" priority="2" bump="0">
					<param name="sequence.directory">/home/mort/Objects/auto/</param>
					<param name="sequence.pattern">.*_rgb.png</param>
                    			<param name="mode.loop">0</param>
                    			<param name="mode.auto_next_image">0</param>
				</Component>

				<Component name="DepthSequence" type="CvBasic:Sequence" priority="3" bump="0">
					<param name="sequence.directory">/home/mort/Objects/auto/</param>
					<param name="sequence.pattern">.*_depth.png</param>
                    			<param name="mode.loop">0</param>
                    			<param name="mode.auto_next_image">0</param>
				</Component>

				<Component name="CameraInfo" type="CvCoreTypes:CameraInfoProvider" priority="4">
					<param name="width">640</param>
					<param name="height">480</param>
					<param name="camera_matrix">525 0 319.5 ; 0 525 239.5 ; 0 0 1</param>
					<param name="dist_coeffs">0.18126525 -0.39866885 0.00000000 0.00000000 0.00000000</param>
				</Component>

				<Component name="D2XYZConverter" type="CameraNUI:DepthConverter" priority="5" bump="0">
					<param name="depth_mode">point_cloud</param>
				</Component>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                                     Board pose estimation
<!--------------------------------------------------------------------------------------------------------------------->

				<Component name="DetectCircles" type="CvBasic:CvFindCirclesGrid" priority="10">
					<param name="grid.width">3</param>
					<param name="grid.height">5</param>
					<param name="grid.size">0.06</param>
				</Component>
				
				<Component name="DetectCirclesInv" type="CvBasic:CvFindCirclesGrid" priority="11">
					<param name="grid.width">3</param>
					<param name="grid.height">5</param>
					<param name="grid.size">0.06</param>
					<param name="image.inverse">1</param>
				</Component>
				<Component name="SolvePNP" type="CvBasic:CvSolvePnP" priority="12">
					<param name="offset.x">0.075</param>
					<param name="offset.y">0.233</param>
					<param name="offset.roll">3.14159265359</param>
				</Component>
				<Component name="SolvePNPinv" type="CvBasic:CvSolvePnP" priority="13">
					<param name="offset.x">0.075</param>
					<param name="offset.y">-0.113</param>
					<param name="offset.roll">3.14159265359</param>
				</Component>

				<Component name="SolveLocation" type="CvBasic:CalcObjectLocation" priority="14" bump="0">
				</Component>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Extraction of fragment of cloud constituting the object
<!--------------------------------------------------------------------------------------------------------------------->

				<Component name="DepthTransform" type="Depth:DepthTransform" priority="20" bump="-2">
					<param name="inverse">1</param>
				</Component>

				<Component name="BoardExtractor" type="ModelViewAcquisition:CubicMaskExtractor" priority="21" bump="0">
					<param name="BlueAxis(X).X_Max">0.15</param>
					<param name="BlueAxis(X).X_Min">-0.15</param>
					<param name="GreenAxis(Y).Y_Max">0.25</param>
					<param name="GreenAxis(Y).Y_Min">-0.25</param>
					<param name="RedAxis(Z).Z_Max">0.6</param>
					<param name="RedAxis(Z).Z_Min">0.015</param>
				</Component>


<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Generation of sparse SIFT cloud
<!--------------------------------------------------------------------------------------------------------------------->
				<Component name="GaussImage" type="CvBasic:CvGaussianNoise" priority="25" bump="0">
					<param name="pass_through">1</param>
				</Component>

				<Component name="GaussCopyImage" type="CvBasic:CvGaussianNoise" priority="26" bump="0">
					<param name="pass_through">1</param>
				</Component>

                                <Component name="SIFTNoisy" type="CvBasic:CvSIFT" priority="30" bump="0">
					<param name="Calculations_path">/home/mort/wyniki/</param>
				</Component>

 				<Component name="KAZENoisy" type="CvBasic:CvKAZE" priority="30" bump="0">
					<param name="Calculations_path">/home/mort/wyniki/</param>
					<param name="Diffusivity">3</param>
				</Component>


				<Component name="SIFT" type="CvBasic:CvSIFT" priority="30" bump="0">
					<param name="Calculations_path">/home/mort/wyniki/</param>
				</Component>

 				<Component name="KAZE" type="CvBasic:CvKAZE" priority="30" bump="0">
					<param name="Calculations_path">/home/mort/wyniki/</param>
					<param name="Diffusivity">3</param>
				</Component>

                                <Component name="SIFT2SPCConverter" type="SIFTObjectModel:FeatureCloudConverter" priority="31" bump="0">
				</Component>

				<Component name="KAZE2SPCConverter" type="SIFTObjectModel:FeatureCloudConverter" priority="31" bump="0">
				</Component>

				<Component name="SIFTNoisy2SPCConverter" type="SIFTObjectModel:FeatureCloudConverter" priority="31" bump="0">
				</Component>

				<Component name="KAZENoisy2SPCConverter" type="SIFTObjectModel:FeatureCloudConverter" priority="31" bump="0">
				</Component>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Processing point clouds from NOW ON!
<!--------------------------------------------------------------------------------------------------------------------->

				<Component name="RGBXYZM2PCConverter" type="PCL:DepthConverter" priority="32" bump="0">
				</Component>

				<Component name="StatisticalOutlierRemoval" type="PCL:StatisticalOutlierRemoval" priority="33" bump="0">
					<param name="MeanK">100</param>
					<param name="StddevMulThresh">0.001</param>
				</Component>
				

<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Registration
<!--------------------------------------------------------------------------------------------------------------------->

				<Component name="InitialTransformation" type="CvCoreTypes:HomogenousMatrixProvider" priority="40" bump="0">
					<param name="offset.x">0.005</param>
					<param name="offset.y">0.005</param>
					<param name="offset.z">0.005</param>
					<param name="offset.roll">0.1</param>
					<param name="offset.pitch">0.1</param>
					<param name="offset.yaw">0.1</param>				
				</Component>

				<Component name="CloudTransformer" type="PCL:CloudTransformer" priority="41" bump="0">
				</Component>

				<Component name="GaussCloud" type="PCL:GaussCloud" priority="42" bump="0">
                                        <param name="Calculations.path">/home/mort/wyniki/</param>
					<param name="Noisy.XYZ">1</param>
					<param name="Noisy.RGB">0</param>
					<param name="Noisy.ratio">0.1</param>
				</Component>

				<Component name="GaussCloud" type="PCL:GaussCopyCloud" priority="42" bump="0">
                                        <param name="Calculations.path">/home/mort/wyniki/</param>
					<param name="Noisy.XYZ">1</param>
					<param name="Noisy.RGB">0</param>
					<param name="Noisy.ratio">0.1</param>
				</Component>

				<Component name="PairwiseRegistration" type="Registration:PairwiseRegistration" priority="43" bump="1">
					<param name="Mode.ICP">1</param>
					<param name="ICP.UseColour">1</param>
					<param name="ICP.UseNormals">0</param>
					<param name="ICP.UseSIFT">0</param>
					<param name="ICP.UseKAZE">0</param>
					<param name="ICP.MaxCorrespondenceDistance">0.012</param>
					<param name="ICP.MaximumIterations">100</param>
					<param name="ICP.EuclideanFitnessEpsilon">0.000000001</param>
					<param name="ICP.TransformationEpsilon">1e-200</param>
					<param name="Calculations_path">/home/mort/wyniki/</param>
				</Component>

				<Component name="CloudStorage" type="Registration:CloudStorage" priority="44" bump="0">
                    			<param name="CloudsLimit">2</param>
					<param name="ReturnPreviousMergedCloud">1</param>
				</Component>


<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Visualization and saving
<!--------------------------------------------------------------------------------------------------------------------->

				<Component name="Writer" type="PCL:PCDWriter" priority="100" bump="0">
					<param name="directory">/home/mort/icp_view/</param>
					<param name="base_name">view</param>
					<param name="binary">1</param>
				</Component>
				<Component name="Stats" type="CvBasic:CalcStatistics" priority="45" bump="0">
					<param name="Calculations_path">/home/mort/wyniki/</param>
				</Component>
			</Executor>
		</Subtask>

		<Subtask name="Visualisation">
			<Executor name="Exec2" period="0.2">
				<Component name="Viewer" type="PCL:CloudViewer" priority="103" bump="0">
					<param name="title">Model point cloud</param>
                    			<param name="coordinate_system">0</param>
				</Component>
			</Executor>
		</Subtask>
	
	</Subtasks>

<!--------------------------------------------------------------------------------------------------------------------->
<!--------------------------------------------------------------------------------------------------------------------->
<!-- pipes connecting datastreams -->
<!--------------------------------------------------------------------------------------------------------------------->
<!--------------------------------------------------------------------------------------------------------------------->

	<DataStreams>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                                     Sources
<!--------------------------------------------------------------------------------------------------------------------->

		<Source name="Trigger.out_trigger">
			<sink>RGBSequence.in_next_image_trigger</sink>
			<sink>DepthSequence.in_next_image_trigger</sink>
			<sink>PairwiseRegistration.in_save_src_cloud_trigger</sink>
			<sink>CloudStorage.in_add_cloud_trigger</sink>
			<sink>Writer.in_save_cloud_trigger</sink><!---->
			<sink>Stats.in_trigger</sink>
			<sink>GaussCloud.in_trigger</sink>
		</Source>

		<Source name="DepthSequence.out_img">
 			<sink>D2XYZConverter.in_depth</sink>
		</Source>
	
		<Source name="RGBSequence.out_img">
			<sink>RGBXYZM2PCConverter.in_color</sink>
			<sink>GaussImage.in_img</sink>
			<sink>GaussCopyImage.in_img</sink>
			<sink>DetectCircles.in_img</sink>
			<sink>DetectCirclesInv.in_img</sink>
		</Source>

		<Source name="GaussImage.out_img">
			<sink>SIFTNoisy.in_img</sink>
			<sink>KAZENoisy.in_img</sink>
		</Source>

		<Source name="GaussCopyImage.out_img">
			<sink>SIFT.in_img</sink>
			<sink>KAZE.in_img</sink>
		</Source>

		<Source name="RGBSequence.out_end_of_sequence_trigger">
			<sink>Trigger.in_stop_auto_trigger</sink>
		</Source>

		<Source name="CameraInfo.out_camera_info">
			<sink>D2XYZConverter.in_camera_info</sink>
			<sink>SolvePNP.in_camera_info</sink>
			<sink>SolvePNPinv.in_camera_info</sink>
		</Source>

		<Source name="D2XYZConverter.out_img">
		  	<sink>DepthTransform.in_depth_xyz</sink>
 		</Source>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                                     Board pose estimation
<!--------------------------------------------------------------------------------------------------------------------->

		<Source name="DetectCircles.out_pattern">
			<sink>SolvePNP.in_object3d</sink>		
		</Source>
		<Source name="DetectCirclesInv.out_pattern">
			<sink>SolvePNPinv.in_object3d</sink>	
		</Source>

		<Source name= "SolvePNPinv.out_homog_matrix">
			<sink>SolveLocation.in_homog_matrix</sink>
		</Source>
		<Source name= "SolvePNP.out_homog_matrix">
			<sink>SolveLocation.in_homog_matrix</sink>
		</Source>
		<Source name= "SolveLocation.out_homog_matrix">
			<sink>DepthTransform.in_homog_matrix</sink>
		</Source>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Extraction of fragment of cloud constituting the object
<!--------------------------------------------------------------------------------------------------------------------->

		<Source name="DepthTransform.out_depth_xyz">
			<sink>BoardExtractor.in_image_xyz</sink>
			<sink>RGBXYZM2PCConverter.in_depth_xyz</sink>
			<sink>SIFT2SPCConverter.in_depth_xyz</sink>
			<sink>KAZE2SPCConverter.in_depth_xyz</sink>
			<sink>SIFTNoisy2SPCConverter.in_depth_xyz</sink>
			<sink>KAZENoisy2SPCConverter.in_depth_xyz</sink>
		</Source>


		<Source name="BoardExtractor.out_mask">
			<sink>RGBXYZM2PCConverter.in_mask</sink>
			<sink>SIFT2SPCConverter.in_mask</sink>
			<sink>KAZE2SPCConverter.in_mask</sink>
			<sink>SIFTNoisy2SPCConverter.in_mask</sink>
			<sink>KAZENoisy2SPCConverter.in_mask</sink>
		 </Source>

		<Source name="RGBXYZM2PCConverter.out_cloud_xyzrgb">
			<sink>StatisticalOutlierRemoval.in_cloud_xyzrgb</sink>
		</Source>

		<Source name="StatisticalOutlierRemoval.out_cloud_xyzrgb">
			<sink>CloudTransformer.in_cloud_xyzrgb</sink>
			<sink>PairwiseRegistration.in_src_cloud_xyzrgb_original</sink>
			<sink>CloudStorage.in_cloud_xyzrgb</sink>
			<sink>PairwiseRegistration.in_src_cloud_xyzrgb</sink>
		</Source>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Generation of sparse SIFT cloud
<!--------------------------------------------------------------------------------------------------------------------->

		<Source name="SIFT.out_descriptors">
			<sink>SIFT2SPCConverter.in_descriptors</sink>	
		</Source>
		<Source name="SIFT.out_features">
			<sink>SIFT2SPCConverter.in_features</sink>	
		</Source>	

		<Source name="SIFTNoisy.out_descriptors">
			<sink>SIFTNoisy2SPCConverter.in_descriptors</sink>	
		</Source>
		<Source name="SIFTNoisy.out_features">
			<sink>SIFTNoisy2SPCConverter.in_features</sink>	
		</Source>

		<Source name="SIFT2SPCConverter.out_cloud_xyzsift">
			<sink>CloudStorage.in_cloud_xyzsift</sink>
			<sink>PairwiseRegistration.in_src_cloud_xyzsift</sink>
		</Source>

		<Source name="SIFTNoisy2SPCConverter.out_cloud_xyzsift">
			<sink>CloudTransformer.in_cloud_xyzsift</sink>
		</Source>
<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Generation of sparse KAZE cloud
<!--------------------------------------------------------------------------------------------------------------------->

		<Source name="KAZE.out_descriptors">
			<sink>KAZE2SPCConverter.in_descriptors</sink>	
		</Source>
		<Source name="KAZE.out_features">
			<sink>KAZE2SPCConverter.in_features</sink>	
		</Source>	

		<Source name="KAZE2SPCConverter.out_cloud_xyzkaze">
			<sink>CloudStorage.in_cloud_xyzkaze</sink>
			<sink>PairwiseRegistration.in_src_cloud_xyzkaze</sink>
		</Source>

		<Source name="KAZENoisy.out_descriptors">
			<sink>KAZENoisy2SPCConverter.in_descriptors</sink>	
		</Source>
		<Source name="KAZENoisy.out_features">
			<sink>KAZENoisy2SPCConverter.in_features</sink>	
		</Source>	

		<Source name="KAZENoisy2SPCConverter.out_cloud_xyzkaze">
			<sink>CloudTransformer.in_cloud_xyzkaze</sink>
		</Source>

<!--------------------------------------------------------------------------------------------------------------------->
<!--                              Registration
<!--------------------------------------------------------------------------------------------------------------------->

		<Source name= "InitialTransformation.out_homogMatrix">
			<sink>CloudTransformer.in_hm</sink>
			<sink>CloudStorage.in_transformation</sink>
			<sink>Stats.in_homog_matrix_right</sink>
		</Source>

		<Source name= "CloudTransformer.out_cloud_xyzrgb">
			<sink>PairwiseRegistration.in_trg_cloud_xyzrgb_original</sink>
			<sink>GaussCloud.in_cloud_xyzrgb</sink>
		</Source>

		<Source name= "GaussCloud.out_cloud_xyzrgb">
			<sink>PairwiseRegistration.in_trg_cloud_xyzrgb</sink>
			<sink>CloudStorage.in_cloud_xyzrgb</sink>
		</Source>

		<Source name= "CloudTransformer.out_cloud_xyzkaze">
			<sink>GaussCloud.in_cloud_xyzkaze</sink>
		</Source>

		<Source name= "GaussCloud.out_cloud_xyzkaze">
			<sink>PairwiseRegistration.in_trg_cloud_xyzkaze</sink>
			<sink>CloudStorage.in_cloud_xyzkaze</sink>
		</Source>

		<Source name= "CloudTransformer.out_cloud_xyzsift">
			<sink>GaussCloud.in_cloud_xyzsift</sink>
		</Source>

		<Source name= "GaussCloud.out_cloud_xyzsift">
			<sink>PairwiseRegistration.in_trg_cloud_xyzsift</sink>
			<sink>CloudStorage.in_cloud_xyzsift</sink>
		</Source>

		<Source name="PairwiseRegistration.out_transformation_xyzrgb">
			<sink>CloudStorage.in_transformation</sink>
			<sink>Stats.in_homog_matrix</sink>
		</Source>
		<Source name="CloudStorage.out_cloud_xyzrgb">
			<sink>Viewer.in_cloud_xyzrgb</sink>
			<sink>Writer.in_cloud_xyzrgb</sink>
		</Source>

		<Source name="CloudStorage.out_cloud_xyzkaze">
			<sink>Viewer.in_cloud_xyzkaze</sink>
			<sink>Writer.in_cloud_xyzkaze</sink>
		</Source>

		<Source name="CloudStorage.out_cloud_xyzsift">
			<sink>Viewer.in_cloud_xyzsift</sink>
			<sink>Writer.in_cloud_xyzsift</sink>
		</Source>

	</DataStreams>
</Task>


